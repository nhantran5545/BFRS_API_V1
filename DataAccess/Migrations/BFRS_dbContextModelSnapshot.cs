// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BFRS_dbContext))]
    partial class BFRS_dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AccountId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("AreaName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FarmId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AreaId");

                    b.HasIndex("FarmId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Bird", b =>
                {
                    b.Property<int>("BirdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirdId"), 1L, 1);

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<int?>("BandNumber")
                        .HasColumnType("int");

                    b.Property<int?>("BirdSpeciesId")
                        .HasColumnType("int");

                    b.Property<int?>("CageId")
                        .HasColumnType("int");

                    b.Property<int?>("FarmId")
                        .HasColumnType("int");

                    b.Property<int?>("FatherBirdId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("HatchedDate")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LifeStage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("MotherBirdId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseFrom")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BirdId");

                    b.HasIndex("BirdSpeciesId");

                    b.HasIndex("CageId");

                    b.HasIndex("FarmId");

                    b.HasIndex("FatherBirdId");

                    b.HasIndex("MotherBirdId");

                    b.ToTable("Bird", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BirdMutation", b =>
                {
                    b.Property<int>("BirdId")
                        .HasColumnType("int");

                    b.Property<int>("MutationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BirdId", "MutationId");

                    b.HasIndex("MutationId");

                    b.ToTable("BirdMutation", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BirdSpecy", b =>
                {
                    b.Property<int>("BirdSpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirdSpeciesId"), 1L, 1);

                    b.Property<int?>("AdultPhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("AdultPhaseTo")
                        .HasColumnType("int");

                    b.Property<string>("BirdSpeciesName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("BirdTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ChickPhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("ChickPhaseTo")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FledgingPhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("FledgingPhaseTo")
                        .HasColumnType("int");

                    b.Property<int?>("HatchingPhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("HatchingPhaseTo")
                        .HasColumnType("int");

                    b.Property<int?>("ImmaturePhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("ImmaturePhaseTo")
                        .HasColumnType("int");

                    b.Property<int?>("JuvenilePhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("JuvenilePhaseTo")
                        .HasColumnType("int");

                    b.Property<int?>("NestlingPhaseFrom")
                        .HasColumnType("int");

                    b.Property<int?>("NestlingPhaseTo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BirdSpeciesId")
                        .HasName("PK__BirdSpec__D9DA595F3082182C");

                    b.HasIndex("BirdTypeId");

                    b.ToTable("BirdSpecies");
                });

            modelBuilder.Entity("DataAccess.Models.BirdType", b =>
                {
                    b.Property<int>("BirdTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirdTypeId"), 1L, 1);

                    b.Property<string>("BirdTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BirdTypeId");

                    b.ToTable("BirdType", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Breeding", b =>
                {
                    b.Property<int>("BreedingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedingId"), 1L, 1);

                    b.Property<int?>("CageId")
                        .HasColumnType("int");

                    b.Property<bool?>("CoupleSeperated")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("FatherBirdId")
                        .HasColumnType("int");

                    b.Property<int?>("MotherBirdId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextCheck")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("BreedingId");

                    b.HasIndex("CageId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FatherBirdId");

                    b.HasIndex("MotherBirdId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Breeding", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BreedingCheckListDetail", b =>
                {
                    b.Property<int>("BreedingCheckListDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedingCheckListDetailId"), 1L, 1);

                    b.Property<int?>("BreedingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("date");

                    b.Property<int?>("CheckListDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckValue")
                        .HasColumnType("int");

                    b.Property<bool?>("Compulsory")
                        .HasColumnType("bit");

                    b.Property<bool?>("Positive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BreedingCheckListDetailId");

                    b.HasIndex("BreedingId");

                    b.HasIndex("CheckListDetailId");

                    b.ToTable("BreedingCheckListDetail", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BreedingNorm", b =>
                {
                    b.Property<int>("BreedingNormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedingNormId"), 1L, 1);

                    b.Property<int?>("BirdSpeciesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BreedingEndMonth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("BreedingStartMonth")
                        .HasColumnType("date");

                    b.Property<string>("FoodRecommendation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("IncubatingDurationMax")
                        .HasColumnType("float");

                    b.Property<double?>("IncubatingDurationMin")
                        .HasColumnType("float");

                    b.Property<double?>("NestHumidityMax")
                        .HasColumnType("float");

                    b.Property<double?>("NestHumidityMin")
                        .HasColumnType("float");

                    b.Property<double?>("NestTemperatureMax")
                        .HasColumnType("float");

                    b.Property<double?>("NestTemperatureMin")
                        .HasColumnType("float");

                    b.Property<double?>("NestingDurationMax")
                        .HasColumnType("float");

                    b.Property<double?>("NestingDurationMin")
                        .HasColumnType("float");

                    b.Property<double?>("PairingDurationMax")
                        .HasColumnType("float");

                    b.Property<double?>("PairingDurationMin")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WeatherFeatures")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BreedingNormId");

                    b.HasIndex("BirdSpeciesId");

                    b.ToTable("BreedingNorm", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BreedingReason", b =>
                {
                    b.Property<int>("BreedingReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedingReasonId"), 1L, 1);

                    b.Property<int?>("BreedingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BreedingReasonId");

                    b.HasIndex("BreedingId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("BreedingReason", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Cage", b =>
                {
                    b.Property<int>("CageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CageId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturedAt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ManufacturedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CageId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AreaId");

                    b.ToTable("Cage", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.CheckList", b =>
                {
                    b.Property<int>("CheckListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckListId"), 1L, 1);

                    b.Property<string>("CheckListName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DurationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CheckListId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("CheckList", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.CheckListDetail", b =>
                {
                    b.Property<int>("CheckListDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckListDetailId"), 1L, 1);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuestionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CheckListDetailId");

                    b.HasIndex("CheckListId");

                    b.ToTable("CheckListDetail", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Clutch", b =>
                {
                    b.Property<int>("ClutchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClutchId"), 1L, 1);

                    b.Property<int?>("BreedingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BroodEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("BroodStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("CageId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("ClutchId");

                    b.HasIndex("BreedingId");

                    b.HasIndex("CageId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Clutch", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ClutchReason", b =>
                {
                    b.Property<int>("ClutchReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClutchReasonId"), 1L, 1);

                    b.Property<int?>("ClutchId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClutchReasonId");

                    b.HasIndex("ClutchId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ClutchReason", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Egg", b =>
                {
                    b.Property<int>("EggId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EggId"), 1L, 1);

                    b.Property<int?>("ClutchId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("HatchedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LayDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("EggId");

                    b.HasIndex("ClutchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Egg", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EggBird", b =>
                {
                    b.Property<int>("EggId")
                        .HasColumnType("int");

                    b.Property<int>("BirdId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EggId", "BirdId");

                    b.HasIndex("BirdId");

                    b.ToTable("EggBird", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EggReason", b =>
                {
                    b.Property<int>("EggReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EggReasonId"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("EggId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EggReasonId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EggId");

                    b.ToTable("EggReason", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Farm", b =>
                {
                    b.Property<int>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FarmName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FarmId");

                    b.ToTable("Farm", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueId"), 1L, 1);

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("BreedingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IssueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IssueTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("IssueId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("BreedingId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Issue", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.IssueType", b =>
                {
                    b.Property<int>("IssueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IssueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IssueTypeId");

                    b.ToTable("IssueType", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Mutation", b =>
                {
                    b.Property<int>("MutationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MutationId"), 1L, 1);

                    b.Property<string>("MutationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MutationId");

                    b.ToTable("Mutation", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SpeciesMutation", b =>
                {
                    b.Property<int>("BirdSpeciesId")
                        .HasColumnType("int");

                    b.Property<int>("MutationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BirdSpeciesId", "MutationId");

                    b.HasIndex("MutationId");

                    b.ToTable("SpeciesMutation", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Area", b =>
                {
                    b.HasOne("DataAccess.Models.Farm", "Farm")
                        .WithMany("Areas")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FK_FarmArea");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("DataAccess.Models.Bird", b =>
                {
                    b.HasOne("DataAccess.Models.BirdSpecy", "BirdSpecies")
                        .WithMany("Birds")
                        .HasForeignKey("BirdSpeciesId")
                        .HasConstraintName("FK_BirdSpeciesBird");

                    b.HasOne("DataAccess.Models.Cage", "Cage")
                        .WithMany("Birds")
                        .HasForeignKey("CageId")
                        .HasConstraintName("FK_CageBird");

                    b.HasOne("DataAccess.Models.Farm", "Farm")
                        .WithMany("Birds")
                        .HasForeignKey("FarmId")
                        .HasConstraintName("FK_FarmBird");

                    b.HasOne("DataAccess.Models.Bird", "FatherBird")
                        .WithMany("InverseFatherBird")
                        .HasForeignKey("FatherBirdId")
                        .HasConstraintName("FK_FatherBird");

                    b.HasOne("DataAccess.Models.Bird", "MotherBird")
                        .WithMany("InverseMotherBird")
                        .HasForeignKey("MotherBirdId")
                        .HasConstraintName("FK_MotherBird");

                    b.Navigation("BirdSpecies");

                    b.Navigation("Cage");

                    b.Navigation("Farm");

                    b.Navigation("FatherBird");

                    b.Navigation("MotherBird");
                });

            modelBuilder.Entity("DataAccess.Models.BirdMutation", b =>
                {
                    b.HasOne("DataAccess.Models.Bird", "Bird")
                        .WithMany("BirdMutations")
                        .HasForeignKey("BirdId")
                        .IsRequired()
                        .HasConstraintName("FK_BirdBirdMutation");

                    b.HasOne("DataAccess.Models.Mutation", "Mutation")
                        .WithMany("BirdMutations")
                        .HasForeignKey("MutationId")
                        .IsRequired()
                        .HasConstraintName("FK_MutationBirdMutation");

                    b.Navigation("Bird");

                    b.Navigation("Mutation");
                });

            modelBuilder.Entity("DataAccess.Models.BirdSpecy", b =>
                {
                    b.HasOne("DataAccess.Models.BirdType", "BirdType")
                        .WithMany("BirdSpecies")
                        .HasForeignKey("BirdTypeId")
                        .HasConstraintName("FK_BirdTypeBirdSpecies");

                    b.Navigation("BirdType");
                });

            modelBuilder.Entity("DataAccess.Models.Breeding", b =>
                {
                    b.HasOne("DataAccess.Models.Cage", "Cage")
                        .WithMany("Breedings")
                        .HasForeignKey("CageId")
                        .HasConstraintName("FK_CageBreeding");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("BreedingCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByBreeding");

                    b.HasOne("DataAccess.Models.Bird", "FatherBird")
                        .WithMany("BreedingFatherBirds")
                        .HasForeignKey("FatherBirdId")
                        .HasConstraintName("FK_FatherBirdBreeding");

                    b.HasOne("DataAccess.Models.Bird", "MotherBird")
                        .WithMany("BreedingMotherBirds")
                        .HasForeignKey("MotherBirdId")
                        .HasConstraintName("FK_MotherBirdBreeding");

                    b.HasOne("DataAccess.Models.Account", "UpdatedByNavigation")
                        .WithMany("BreedingUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_UpdatedByBreeding");

                    b.Navigation("Cage");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("FatherBird");

                    b.Navigation("MotherBird");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.BreedingCheckListDetail", b =>
                {
                    b.HasOne("DataAccess.Models.Breeding", "Breeding")
                        .WithMany("BreedingCheckListDetails")
                        .HasForeignKey("BreedingId")
                        .HasConstraintName("FK_BreedingBreedingCheckListDetail");

                    b.HasOne("DataAccess.Models.CheckListDetail", "CheckListDetail")
                        .WithMany("BreedingCheckListDetails")
                        .HasForeignKey("CheckListDetailId")
                        .HasConstraintName("FK_CheckListDetailBreedingCheckListDetail");

                    b.Navigation("Breeding");

                    b.Navigation("CheckListDetail");
                });

            modelBuilder.Entity("DataAccess.Models.BreedingNorm", b =>
                {
                    b.HasOne("DataAccess.Models.BirdSpecy", "BirdSpecies")
                        .WithMany("BreedingNorms")
                        .HasForeignKey("BirdSpeciesId")
                        .HasConstraintName("FK_BirdSpeciesBreedingNorm");

                    b.Navigation("BirdSpecies");
                });

            modelBuilder.Entity("DataAccess.Models.BreedingReason", b =>
                {
                    b.HasOne("DataAccess.Models.Breeding", "Breeding")
                        .WithMany("BreedingReasons")
                        .HasForeignKey("BreedingId")
                        .HasConstraintName("FK_BreedingBreedingReason");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("BreedingReasons")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByBreedingReason");

                    b.Navigation("Breeding");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.Cage", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("Cages")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountCage");

                    b.HasOne("DataAccess.Models.Area", "Area")
                        .WithMany("Cages")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_AreaCage");

                    b.Navigation("Account");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("DataAccess.Models.CheckList", b =>
                {
                    b.HasOne("DataAccess.Models.BirdSpecy", "Species")
                        .WithMany("CheckLists")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("FK_SpeciesCheckList");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("DataAccess.Models.CheckListDetail", b =>
                {
                    b.HasOne("DataAccess.Models.CheckList", "CheckList")
                        .WithMany("CheckListDetails")
                        .HasForeignKey("CheckListId")
                        .HasConstraintName("FK_CheckListDetail");

                    b.Navigation("CheckList");
                });

            modelBuilder.Entity("DataAccess.Models.Clutch", b =>
                {
                    b.HasOne("DataAccess.Models.Breeding", "Breeding")
                        .WithMany("Clutches")
                        .HasForeignKey("BreedingId")
                        .HasConstraintName("FK_BreedingClutch");

                    b.HasOne("DataAccess.Models.Cage", "Cage")
                        .WithMany("Clutches")
                        .HasForeignKey("CageId")
                        .HasConstraintName("FK_CageClutch");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("ClutchCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByClutch");

                    b.HasOne("DataAccess.Models.Account", "UpdatedByNavigation")
                        .WithMany("ClutchUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_UpdatedByClutch");

                    b.Navigation("Breeding");

                    b.Navigation("Cage");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.ClutchReason", b =>
                {
                    b.HasOne("DataAccess.Models.Clutch", "Clutch")
                        .WithMany("ClutchReasons")
                        .HasForeignKey("ClutchId")
                        .HasConstraintName("FK_ClutchClutchReason");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("ClutchReasons")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByClutchReason");

                    b.Navigation("Clutch");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.Egg", b =>
                {
                    b.HasOne("DataAccess.Models.Clutch", "Clutch")
                        .WithMany("Eggs")
                        .HasForeignKey("ClutchId")
                        .HasConstraintName("FK_ClutchEgg");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("EggCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByEgg");

                    b.HasOne("DataAccess.Models.Account", "UpdatedByNavigation")
                        .WithMany("EggUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_UpdatedByEgg");

                    b.Navigation("Clutch");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.EggBird", b =>
                {
                    b.HasOne("DataAccess.Models.Bird", "Bird")
                        .WithMany("EggBirds")
                        .HasForeignKey("BirdId")
                        .IsRequired()
                        .HasConstraintName("FK_BirdEggBird");

                    b.HasOne("DataAccess.Models.Egg", "Egg")
                        .WithMany("EggBirds")
                        .HasForeignKey("EggId")
                        .IsRequired()
                        .HasConstraintName("FK_EggEggBird");

                    b.Navigation("Bird");

                    b.Navigation("Egg");
                });

            modelBuilder.Entity("DataAccess.Models.EggReason", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("EggReasons")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByEggReason");

                    b.HasOne("DataAccess.Models.Egg", "Egg")
                        .WithMany("EggReasons")
                        .HasForeignKey("EggId")
                        .HasConstraintName("FK_EggEggReason");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Egg");
                });

            modelBuilder.Entity("DataAccess.Models.Issue", b =>
                {
                    b.HasOne("DataAccess.Models.Account", "AssignedToNavigation")
                        .WithMany("IssueAssignedToNavigations")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_AssignedToIssue");

                    b.HasOne("DataAccess.Models.Breeding", "Breeding")
                        .WithMany("Issues")
                        .HasForeignKey("BreedingId")
                        .HasConstraintName("FK_BreedingIssue");

                    b.HasOne("DataAccess.Models.Account", "CreatedByNavigation")
                        .WithMany("IssueCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CreatedByIssue");

                    b.HasOne("DataAccess.Models.IssueType", "IssueType")
                        .WithMany("Issues")
                        .HasForeignKey("IssueTypeId")
                        .HasConstraintName("FK_TypeIssue");

                    b.HasOne("DataAccess.Models.Account", "UpdatedByNavigation")
                        .WithMany("IssueUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_UpdatedByIssue");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Breeding");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("IssueType");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.SpeciesMutation", b =>
                {
                    b.HasOne("DataAccess.Models.BirdSpecy", "BirdSpecies")
                        .WithMany("SpeciesMutations")
                        .HasForeignKey("BirdSpeciesId")
                        .IsRequired()
                        .HasConstraintName("FK_BirdSpeciesSM");

                    b.HasOne("DataAccess.Models.Mutation", "Mutation")
                        .WithMany("SpeciesMutations")
                        .HasForeignKey("MutationId")
                        .IsRequired()
                        .HasConstraintName("FK_MutationSM");

                    b.Navigation("BirdSpecies");

                    b.Navigation("Mutation");
                });

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Navigation("BreedingCreatedByNavigations");

                    b.Navigation("BreedingReasons");

                    b.Navigation("BreedingUpdatedByNavigations");

                    b.Navigation("Cages");

                    b.Navigation("ClutchCreatedByNavigations");

                    b.Navigation("ClutchReasons");

                    b.Navigation("ClutchUpdatedByNavigations");

                    b.Navigation("EggCreatedByNavigations");

                    b.Navigation("EggReasons");

                    b.Navigation("EggUpdatedByNavigations");

                    b.Navigation("IssueAssignedToNavigations");

                    b.Navigation("IssueCreatedByNavigations");

                    b.Navigation("IssueUpdatedByNavigations");
                });

            modelBuilder.Entity("DataAccess.Models.Area", b =>
                {
                    b.Navigation("Cages");
                });

            modelBuilder.Entity("DataAccess.Models.Bird", b =>
                {
                    b.Navigation("BirdMutations");

                    b.Navigation("BreedingFatherBirds");

                    b.Navigation("BreedingMotherBirds");

                    b.Navigation("EggBirds");

                    b.Navigation("InverseFatherBird");

                    b.Navigation("InverseMotherBird");
                });

            modelBuilder.Entity("DataAccess.Models.BirdSpecy", b =>
                {
                    b.Navigation("Birds");

                    b.Navigation("BreedingNorms");

                    b.Navigation("CheckLists");

                    b.Navigation("SpeciesMutations");
                });

            modelBuilder.Entity("DataAccess.Models.BirdType", b =>
                {
                    b.Navigation("BirdSpecies");
                });

            modelBuilder.Entity("DataAccess.Models.Breeding", b =>
                {
                    b.Navigation("BreedingCheckListDetails");

                    b.Navigation("BreedingReasons");

                    b.Navigation("Clutches");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("DataAccess.Models.Cage", b =>
                {
                    b.Navigation("Birds");

                    b.Navigation("Breedings");

                    b.Navigation("Clutches");
                });

            modelBuilder.Entity("DataAccess.Models.CheckList", b =>
                {
                    b.Navigation("CheckListDetails");
                });

            modelBuilder.Entity("DataAccess.Models.CheckListDetail", b =>
                {
                    b.Navigation("BreedingCheckListDetails");
                });

            modelBuilder.Entity("DataAccess.Models.Clutch", b =>
                {
                    b.Navigation("ClutchReasons");

                    b.Navigation("Eggs");
                });

            modelBuilder.Entity("DataAccess.Models.Egg", b =>
                {
                    b.Navigation("EggBirds");

                    b.Navigation("EggReasons");
                });

            modelBuilder.Entity("DataAccess.Models.Farm", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Birds");
                });

            modelBuilder.Entity("DataAccess.Models.IssueType", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("DataAccess.Models.Mutation", b =>
                {
                    b.Navigation("BirdMutations");

                    b.Navigation("SpeciesMutations");
                });
#pragma warning restore 612, 618
        }
    }
}
